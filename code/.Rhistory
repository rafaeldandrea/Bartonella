sp1 = selected_species,
sp2 = selected_species
) %>%
filter(sp2 >= sp1)
connections =
apply(species_pairs, 1, function(char){
char = unlist(char)
coords1 =
bci_filtered %>%
filter(sp == char[1]) %>%
select(gx, gy) %>%
as.matrix
coords2 =
bci_filtered %>%
filter(sp == char[2]) %>%
select(gx, gy) %>%
as.matrix
distances = as.numeric(dist.matrix(coords1, coords2, method = 'euclidean'))
distances = distances[distances > 0]
connected =
mean(distances <= bci_distance_threshold) -
cumulative_null_prob_threshold
return(connected)
})
pair_counts =
dtf %>%
mutate(pairs_within_radius = connections)
pair_counts
selected_species
choose(length(selected_species), 2)
length(selected_species)
29 * 28 / 2 + 29
selected_species = sort(unique(as.character(bci_filtered$sp)))
species_pairs =
tidyr::crossing(
sp1 = selected_species,
sp2 = selected_species
) %>%
filter(sp2 >= sp1)
connections =
apply(species_pairs, 1, function(char){
char = unlist(char)
coords1 =
bci_filtered %>%
filter(sp == char[1]) %>%
select(gx, gy) %>%
as.matrix
coords2 =
bci_filtered %>%
filter(sp == char[2]) %>%
select(gx, gy) %>%
as.matrix
distances = as.numeric(dist.matrix(coords1, coords2, method = 'euclidean'))
distances = distances[distances > 0]
connected = 1 * (mean(distances <= bci_distance_threshold) > cumulative_null_prob_threshold)
return(connected)
})
connectedness =
dtf %>%
mutate(connected = connections)
connectedness
adjacency_matrix =
connectedness %>%
pivot_wider(
id_cols = sp1,
names_from = sp2,
values_from = connected,
values_fill = 0
) %>%
select(-1) %>%
as.matrix
graph =
graph_from_adjacency_matrix(
adjacency_matrix,
mode = 'undirected',
diag = TRUE
)
graph_no_self_loops =
graph_from_adjacency_matrix(
adjacency_matrix,
mode = 'undirected',
diag = FALSE
)
communities = cluster_walktrap(graph)
modularity = modularity(communities)
membership = membership(communities)
plot_communities =
as.ggplot(
~plot(
communities,
graph_no_self_loops,
col = printing_colors[communities$membership]
)
) +
theme(aspect.ratio = 1) +
theme(plot.margin = margin(-2, -3, -3, -3, 'cm'))
plot_adjacency_matrix =
connectedness %>%
mutate(
sp1 = factor(sp1, levels = names(sort(membership))),
sp2 = factor(sp2, levels = names(sort(membership))),
connected = factor(connected)
) %>%
arrange(sp1, sp2) %>%
ggplot(aes(sp1, sp2, fill = connected)) +
geom_raster() +
theme(aspect.ratio = 1) +
theme(legend.position = 'none') +
scale_fill_manual(values = c('white', 'grey30')) +
theme(
axis.text.x =
element_text(
angle = 90,
vjust = 0.2,
face = 'bold',
color = printing_colors[sort(membership)]
)
) +
theme(
axis.text.y =
element_text(
face = 'bold',
color = printing_colors[sort(membership)]
)
)
plot_bci_colors =
bci_filtered %>%
inner_join(
tibble(
sp = names(membership),
cluster = membership
),
by = 'sp'
) %>%
ggplot(aes(gx, gy, color = printing_colors[cluster])) +
geom_point() +
theme(aspect.ratio = .5) +
theme(legend.position = 'none')
set.seed(0)
as.ggplot(
~plot(
graph_no_self_loops,
vertex.color = '#FFCD46'
)
) +
theme(aspect.ratio = 1) +
theme(plot.margin = margin(-2, -3, -3, -3, 'cm'))
knitr::opts_chunk$set(echo = TRUE)
library(plyr) ## for function ddply()
library(tidyverse)
library(spatstat) ## for Ripley's K analysis
library(igraph) ## for community-finding analysis
library(ggplotify) ## for function as.ggplot()
library(wordspace) ## for function dist.matrix()
theme_set(theme_bw())
count = dplyr::count
bci =
get(
load(
url(
'https://github.com/rafaeldandrea/BCI/blob/master/bci.full7.rdata?raw=true'
)
)
) %>%
as_tibble
bci
bci =
bci %>%
select(quadrat, gx, gy, sp, dbh)
bci
bci =
bci %>%
dplyr::filter(dbh >= 100)
bci
plot_bci =
bci %>%
ggplot(aes(gx, gy, group = sp, color = sp)) +
geom_point() +
theme(
legend.position = 'none',
aspect.ratio = 0.5
)
plot_bci
plot_quadrat =
bci %>%
dplyr::filter(
gx < 500,
gy < 250
) %>%
ggplot(aes(gx, gy, group = sp, color = sp)) +
geom_point() +
theme(
legend.position = 'none',
aspect.ratio = 0.5
)
plot_quadrat
tabulation =
bci %>%
group_by(quadrat) %>%
count() %>%
ungroup
tabulation
lambda = mean(tabulation$n)
hist(tabulation$n, freq = FALSE, xlab = 'Tree count', main = 'Histogram of tree counts across BCI quadrats', las = 1)
lines(k <- 0:max(tabulation$n), dpois(k, lambda = lambda), col = 'red', lwd = 2)
legend('topright', col = 'red', legend = 'Poisson', lwd = 2)
plot(ecdf(tabulation$n), xlab = 'Tree count', ylab = 'Cumulative proportion', main = '', las = 1)
lines(k <- 1:max(tabulation$n), ppois(k, lambda = lambda), col = 'red', lwd = 2)
legend('topleft', col = 'red', legend = 'Poisson', lwd = 2)
plot_gustsu =
bci %>%
dplyr::filter(sp == 'gustsu') %>%
ggplot(aes(gx, gy, color = sp)) +
geom_point() +
theme(
legend.position = 'none',
aspect.ratio = 0.5
) +
ggtitle('Gustavia superba')
plot_gustsu
tabulation =
bci %>%
group_by(quadrat) %>%
summarize(n = sum(sp == 'gustsu'), .groups = 'drop')
tabulation
lambda = mean(tabulation$n)
hist(tabulation$n, freq = FALSE, xlab = 'Tree count', main = 'Histogram of tree counts across BCI quadrats', las = 1)
lines(k <- 0:max(tabulation$n), dpois(k, lambda = lambda), col = 'red', lwd = 2)
legend('topright', col = 'red', legend = 'Poisson', lwd = 2)
plot(ecdf(tabulation$n), xlab = 'Tree count', ylab = 'Cumulative proportion', main = '', las = 1)
lines(k <- 0:max(tabulation$n), ppois(k, lambda = lambda), col = 'red', lwd = 2)
legend('bottomright', col = 'red', legend = 'Poisson', lwd = 2)
plot_gustsu +
geom_vline(xintercept = 0:8 * 125, color = 'grey') +
geom_hline(yintercept = 0:5 * 100, color = 'grey')
tabulation =
bci %>%
mutate(
newquadrat =
1 + gx %/% 125 +
10 * (1 + gy %/% 100)
) %>%
group_by(newquadrat) %>%
summarize(n = sum(sp == 'gustsu'), .groups = 'drop')
tabulation
lambda = mean(tabulation$n)
hist(tabulation$n, freq = FALSE, xlab = 'Tree count', main = 'Histogram of tree counts across BCI quadrats', las = 1, breaks = 30, ylim = c(0,.1))
lines(k <- 0:max(tabulation$n), dpois(k, lambda = lambda), col = 'red', lwd = 2)
legend('topright', col = 'red', legend = 'Poisson', lwd = 2)
plot(ecdf(tabulation$n), xlab = 'Tree count', ylab = 'Cumulative proportion', main = '', las = 1)
lines(k <- 0:max(tabulation$n), ppois(k, lambda = lambda), col = 'red', lwd = 2)
legend('bottomright', col = 'red', legend = 'Poisson', lwd = 2)
BCI_ppp = function(species){
if(species == 'all'){
dtf = bci
} else{
dtf =
bci %>%
dplyr::filter(sp == species)
}
dtf %>%
select(gx, gy) %>%
unique() %>%
as.ppp(W = list(xrange = c(0, 1000), yrange = c(0, 500)))
}
K_tibble = function(species){
x = BCI_ppp(species)
Kinhom(x, correction = 'isotropic') %>%
as_tibble %>%
mutate(sp = species)
}
RipleysK_tibble =
bind_rows(
K_tibble('all') %>% mutate(label = 'All species'),
K_tibble('gustsu') %>% mutate(label = 'Gustavia superba')
) %>%
dplyr::filter(r > .5 & r < 50)
plot_RipleysK =
ggplot() +
geom_line(
data = RipleysK_tibble,
aes(r, iso / pi / r^2)
) +
geom_hline(yintercept = 1, color = 'red') +
ylab('Observed / Expected') +
theme(aspect.ratio = 1) +
facet_wrap(~label, scales = 'free', nrow = 1)
plot_RipleysK
null_tibble = NULL
for(k in 1:1e3){
number_of_points = sum(bci$sp == 'gustsu')
x = runifpoint(number_of_points, win = owin(c(0, 1000), c(0, 500)))
null_tibble =
null_tibble %>%
rbind(as_tibble(Kest(x, correction = 'isotropic')))
}
null_tibble_summary =
null_tibble %>%
dplyr::filter(r > .5 & r < 50) %>%
mutate(obs = iso / pi / r^2) %>%
group_by(r) %>%
dplyr::summarize(
mean = mean(obs),
ci95 = quantile(obs, .975),
ci05 = quantile(obs, .025),
.groups = 'drop'
)
plot_RipleysK_with_confidence_band =
ggplot() +
geom_hline(yintercept = 1, color = 'red') +
geom_ribbon(
data = null_tibble_summary,
aes(x = r, ymin = ci05, ymax = ci95),
fill = 'red',
alpha = 0.3
) +
geom_line(
data =
RipleysK_tibble %>%
dplyr::filter(label == 'Gustavia superba'),
aes(r, iso / pi / r^2),
size = 1
) +
ylab('Observed / Expected') +
theme(aspect.ratio = 1) +
ggtitle('Gustavia superba')
plot_RipleysK_with_confidence_band
bci_distance_threshold = 10 ## in meters
abundance_threshold = 200
cumulative_null_prob_threshold = 0.0006203391
printing_colors = c('#DD5144', '#1DA462', '#4C8BF5')
set.seed(0)
abuns =
bci %>%
group_by(sp) %>%
count %>%
arrange(desc(n)) %>%
ungroup
bci_filtered =
bci %>%
inner_join(abuns, by = 'sp') %>%
filter(n >= abundance_threshold)
selected_species = sort(unique(as.character(bci_filtered$sp)))
species_pairs =
tidyr::crossing(
sp1 = selected_species,
sp2 = selected_species
) %>%
filter(sp2 >= sp1)
connections =
apply(species_pairs, 1, function(char){
char = unlist(char)
coords1 =
bci_filtered %>%
filter(sp == char[1]) %>%
select(gx, gy) %>%
as.matrix
coords2 =
bci_filtered %>%
filter(sp == char[2]) %>%
select(gx, gy) %>%
as.matrix
distances = as.numeric(dist.matrix(coords1, coords2, method = 'euclidean'))
distances = distances[distances > 0]
connected = 1 * (mean(distances <= bci_distance_threshold) > cumulative_null_prob_threshold)
return(connected)
})
connectedness =
dtf %>%
mutate(connected = connections)
# pair_counts =
#   {
#     tidyr::crossing(
#       sp1 = selected_species,
#       sp2 = selected_species
#     ) %>%
#       filter(sp2 >= sp1) %>%
#       ddply(
#         .(sp1, sp2),
#         function(df){
#           sp1 = df$sp1
#           sp2 = df$sp2
#
#          df1 =
#             bci_filtered %>%
#             filter(sp == sp1)
#
#           df2 =
#             bci_filtered %>%
#             filter(sp == sp2)
#
#             nn12 =
#               dist.matrix(
#                 df1 %>%
#                   select(gx, gy) %>%
#                   as.matrix,
#                 df2 %>%
#                   select(gx, gy) %>%
#                   as.matrix,
#                 method = 'euclidean'
#               ) %>%
#               as.numeric
#
#             nn12_positive = nn12[nn12 > 0]
#
#             connected =
#               mean(nn12_positive <= bci_distance_threshold) -
#               cumulative_null_prob_threshold
#         }
#       ) %>%
#       as_tibble %>%
#       rename(pairs_within_radius = V1)
#   }
#
# connectedness =
#   pair_counts %>%
#     bind_rows(
#       pair_counts %>%
#         filter(sp1 != sp2) %>%
#         rename(sp1 = sp2, sp2 = sp1)
#     ) %>%
#     unique %>%
#   mutate(connected = 1 * (pairs_within_radius > 0))
adjacency_matrix =
connectedness %>%
pivot_wider(
id_cols = sp1,
names_from = sp2,
values_from = connected,
values_fill = 0
) %>%
select(-1) %>%
as.matrix
graph =
graph_from_adjacency_matrix(
adjacency_matrix,
mode = 'undirected',
diag = TRUE
)
graph_no_self_loops =
graph_from_adjacency_matrix(
adjacency_matrix,
mode = 'undirected',
diag = FALSE
)
communities = cluster_walktrap(graph)
modularity = modularity(communities)
membership = membership(communities)
plot_communities =
as.ggplot(
~plot(
communities,
graph_no_self_loops,
col = printing_colors[communities$membership]
)
) +
theme(aspect.ratio = 1) +
theme(plot.margin = margin(-2, -3, -3, -3, 'cm'))
plot_adjacency_matrix =
connectedness %>%
mutate(
sp1 = factor(sp1, levels = names(sort(membership))),
sp2 = factor(sp2, levels = names(sort(membership))),
connected = factor(connected)
) %>%
arrange(sp1, sp2) %>%
ggplot(aes(sp1, sp2, fill = connected)) +
geom_raster() +
theme(aspect.ratio = 1) +
theme(legend.position = 'none') +
scale_fill_manual(values = c('white', 'grey30')) +
theme(
axis.text.x =
element_text(
angle = 90,
vjust = 0.2,
face = 'bold',
color = printing_colors[sort(membership)]
)
) +
theme(
axis.text.y =
element_text(
face = 'bold',
color = printing_colors[sort(membership)]
)
)
plot_bci_colors =
bci_filtered %>%
inner_join(
tibble(
sp = names(membership),
cluster = membership
),
by = 'sp'
) %>%
ggplot(aes(gx, gy, color = printing_colors[cluster])) +
geom_point() +
theme(aspect.ratio = .5) +
theme(legend.position = 'none')
set.seed(0)
as.ggplot(
~plot(
graph_no_self_loops,
vertex.color = '#FFCD46'
)
) +
theme(aspect.ratio = 1) +
theme(plot.margin = margin(-2, -3, -3, -3, 'cm'))
plot_communities
plot_adjacency_matrix
plot_bci_colors
